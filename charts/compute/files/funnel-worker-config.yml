Database: boltdb

Compute: {{ .Values.compute }}

Logger:
  Level: {{ .Values.logLevel | quote }}

HTSGETStorage:
  Disabled: {{ .Values.htsget.disabled }}
  Protocol: {{ .Values.htsget.protocol }}
  Timeout: 360s

RPCClient:
  MaxRetries: 3
  Timeout: 30s
  User: {{ .Values.rpcclient.user | quote }}
  Password: {{ .Values.rpcclient.password | quote }}

EventWriters:
  - rpc
  - log

Server:
  HostName: {{ .Release.Name }}
  RPCPort: 9090

Kubernetes:
  # Change to "kubernetes" to use the kubernetes executor
  Executor: {{ .Values.compute }}
  Namespace: {{ .Release.Namespace }}
  ExecutorTemplate: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ print "{{.TaskId}}-{{.JobId}}" }}
      namespace: {{ print "{{.Namespace}}" }}
      labels:
        job-name: {{ print "{{.TaskId}}-{{.JobId}}" }}
    spec:
      backoffLimit: 0
      completions: 1
      template:
        spec:
          restartPolicy: Never
          securityContext:
            fsGroup: {{ .Values.securityContext.worker.fsGroup}}
            runAsUser: {{ .Values.securityContext.worker.runAsUser}}
            runAsGroup: {{ .Values.securityContext.worker.runAsGroup}}
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: funnel-worker-{{ print "{{.TaskId}}" }}
            image: {{ print "{{.Image}}" }}
            imagePullPolicy: Always
            command: ["/bin/sh", "-c"]
            args: {{ print "{{.Command}}" }}
            workingDir: {{ print "{{.Workdir}}" }}
            resources:
              requests:
                cpu: {{ print "{{if ne .Cpus 0 -}}{{.Cpus}}{{ else }}{{\"100m\"}}{{end}}" }}
                memory: {{ print "{{if ne .RamGb 0.0 -}}{{printf \"%.0fG\" .RamGb}}{{else}}{{\"16M\"}}{{end}}" }}
                ephemeral-storage: {{ print "{{if ne .DiskGb 0.0 -}}{{printf \"%.0fG\" .DiskGb}}{{else}}{{\"100M\"}}{{end}}" }}
              limits:
                cpu: {{ .Values.computeResourceLimits.worker.cpu | quote}}
                memory: {{ .Values.computeResourceLimits.worker.memory | quote }}
                ephemeral-storage: {{ .Values.computeResourceLimits.worker.ephemeralStorage | quote}}
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              privileged: false
            volumeMounts:
            - name: storage
              mountPath: /shared
              subPath: shared
            ### DO NOT CHANGE THIS
            {{ print "{{range $idx, $item := .Volumes}}" }}
            - name: storage
              mountPath: {{ print "{{$item.ContainerPath}}" }}
              subPath: {{ print "{{$.TaskId}}{{$item.ContainerPath}}" }}
            {{ print "{{end}}" }}

          volumes:
          - name: storage
            persistentVolumeClaim:
              claimName: {{ .Values.pvc.name }}
